// As consultas 25. UPDATE, 27. RENAMECOLLECTION e 30. FINDONE estão no arquivo de povoamento.

// 1. e 2. USE and FIND
// Consultar jogadores que participam da olimpíada e jogam SnowBoard
use('winterGames');
db.jogador.find({'esporte': 'Biatlo'});

// 3. SIZE
// Consultar times que são compostos por 4 integrantes
use('winterGames');
db.time.find( { 'jogadores': { $size: 4 } } );

// 3. SIZE
// Consultar países que estão participando de exatamente 1 esporte
use('winterGames');
db.pais.find( {'lista_medalhas': { $size: 1 }});

//10. COUNT 
// Quantidade de jogadores que participam da olimpíada
// O COUNT ESTÁ DEPRECIADO, HOJE EM DIA USAM ESSE COUNTDOCUMENTS
use('winterGames');
db.jogador.countDocuments();
// Quantidade de países que participam da olimpíada
use('winterGames');
db.pais.countDocuments();

// 4.AGREGGATE, 5.MATCH, 7.GTE, 19.PRETTY, 6.PROJECT, 14.SORT
// Paises que tem ao menos uma medalha de ouro em ordem decrescente
use('winterGames');
db.pais.aggregate([
    {$match: {
        "total_medalhas.ouro": {$gte: 1}
        }
    },  
    {$project: {
        _id: false, nome: true, sigla:true, total_medalhas: true
        }
    }
    
]).sort({"total_medalhas.ouro": -1}).pretty();

// 4.AGGREGATE, 8.GROUP, 9.SUM, 19.PRETTY, 15.LIMIT
// Mostrar os 3 primeiros países em ordem número de medalhas conquistadas em ordem decrescente
use('winterGames');
db.pais.aggregate([
    { $group: {
            _id: "$nome",
            medalhas_totais: {$sum: {$add: ["$total_medalhas.ouro", "$total_medalhas.prata", "$total_medalhas.bronze"]}
        }
    }},
    { $sort: {medalhas_totais: -1} },
    { $limit: 3}
]).pretty();


//16.$where, 18.function, 11.max
//Retorna o jogador mais velho
use('winterGames');
db.jogador.find({$where:
    function(){
        return(this.idade == {$max: '$idade'})
    }}
).pretty();

// 12.AVG, 4.AGREGGATE, 8.GROUP
// Retorna a média da idade dos jogadores arredondada em 2 casas decimais
use('winterGames');
db.jogador.aggregate([
    {$group: {
      _id: null,
      Media_idade: {$avg: '$idade'}
    }},
    {$project:{
        _id: false, Media_Idade_Jogadores: {$round: ["$Media_idade", 2]}
    }}
]);

//
// Retornar os paises que não tem medalhas de ouro !!!!!!!!!!!!!!!!!!!TA ERRADO!!!!!!!!!!!!!!!!!!!!!!
use('winterGames');
db.pais.find( { 'total_medalhas.ouro' : {$exists: false}});

db.Selecoes.find( { titulos: { $exists: false } } )

// 24.FILTER, 4.AGGREGATE, 6.PROJECT
// Listar as medalhas ganhas em esportes em grupo por país
use('winterGames');
db.pais.aggregate([
    {$project: {
        _id: false,
        nome: true,
        lista_medalhas:{
            $filter:{
                input: "$lista_medalhas",
                as: "lista",
                cond: { $eq: [ "$$lista.tipo", 'Grupo' ] }
            }
        }
    }}
]);

// ALL DE BRUNA
db.combos.find({produtos: {$all: [
    db.produtos.findOne({id_produto: "0c88"})._id, // Smash Mussarela
    db.produtos.findOne({id_produto: "an5k"})._id  // Refrigerante 1,5L 
]}}).pretty();

//ALL
// INCOMPLETO
db.pais.find({lista_medalhas: {$all: [
    db.produtos.findOne({id_produto: "0c88"})._id, // Smash Mussarela
    db.produtos.findOne({id_produto: "an5k"})._id  // Refrigerante 1,5L 
]}}).pretty();

// 26.Save
// Adição de uma nova competidora na tabela de Jogadores
use('winterGames');
db.jogador.save( {'nome': 'Luiza Brasólios', 'idade': 21, 'pais': 'BR', 'sexo': 'F', 'esporte': 'Patinação artística'} );


// 22.Text, 23.Search, 14.Sort, 19.Pretty, 15.Limit
// Listando os 10 atletas mais velhos que jogam alguma modalidade de Bobsled
use('winterGames');
db.jogador.createIndex({esporte: "text"});
db.jogador.find( { $text: { $search: "Bobsled"} }, {_id: 0, nome: 1, idade: 1, pais: 1, sexo: 1, esporte: 1}).limit(10).sort({'idade': -1}).pretty();

// 28.Cond
//
use('winterGames');
db.